// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: entry.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBalanceEntry = `-- name: CreateBalanceEntry :one
INSERT INTO entries (account_id, amount)
VALUES($1, $2)
RETURNING id, account_id, amount, created_at
`

type CreateBalanceEntryParams struct {
	AccountID pgtype.Int8 `json:"account_id"`
	Amount    float64     `json:"amount"`
}

func (q *Queries) CreateBalanceEntry(ctx context.Context, arg CreateBalanceEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createBalanceEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountBalanceEntries = `-- name: GetAccountBalanceEntries :many
SELECT id, account_id, amount, created_at FROM entries
WHERE account_id = $1
LIMIT 1
`

func (q *Queries) GetAccountBalanceEntries(ctx context.Context, accountID pgtype.Int8) ([]Entry, error) {
	rows, err := q.db.Query(ctx, getAccountBalanceEntries, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Entry{}
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBalanceEntry = `-- name: GetBalanceEntry :one
SELECT id, account_id, amount, created_at FROM entries
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBalanceEntry(ctx context.Context, id int64) (Entry, error) {
	row := q.db.QueryRow(ctx, getBalanceEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
