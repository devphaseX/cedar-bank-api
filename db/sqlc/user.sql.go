// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(username, email, fullname, hashed_password)
VALUES ($1, $2, $3, $4)
RETURNING id, username, email, fullname, hashed_password, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Email          string `json:"email"`
	Fullname       string `json:"fullname"`
	HashedPassword string `json:"hashed_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Fullname,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUniqueID = `-- name: GetUserByUniqueID :one
SELECT id, username, email, fullname, hashed_password, password_changed_at, created_at FROM users
WHERE id = $1
or email ilike $2
or username ilike $3
LIMIT 1
`

type GetUserByUniqueIDParams struct {
	ID       pgtype.Int8 `json:"id"`
	Email    pgtype.Text `json:"email"`
	Username pgtype.Text `json:"username"`
}

func (q *Queries) GetUserByUniqueID(ctx context.Context, arg GetUserByUniqueIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUniqueID, arg.ID, arg.Email, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, email, fullname, hashed_password, password_changed_at, created_at FROM users
WHERE ($3::int[] IS NULL OR id = ANY($3::int[]))
OFFSET $1
LIMIT $2
`

type GetUsersParams struct {
	Offset  int64   `json:"offset"`
	Limit   int64   `json:"limit"`
	Column3 []int32 `json:"column_3"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Offset, arg.Limit, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Fullname,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
