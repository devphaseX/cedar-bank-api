// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions(
id,
owner_id,
user_agent,
refresh_token,
client_ip,
is_blocked,
expired_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, owner_id, user_agent, refresh_token, client_ip, is_blocked, expired_at, created_at
`

type CreateSessionParams struct {
	ID           pgtype.UUID        `json:"id"`
	OwnerID      int64              `json:"owner_id"`
	UserAgent    string             `json:"user_agent"`
	RefreshToken string             `json:"refresh_token"`
	ClientIp     pgtype.Text        `json:"client_ip"`
	IsBlocked    pgtype.Bool        `json:"is_blocked"`
	ExpiredAt    pgtype.Timestamptz `json:"expired_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.OwnerID,
		arg.UserAgent,
		arg.RefreshToken,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiredAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserAgent,
		&i.RefreshToken,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByUniqueID = `-- name: GetSessionByUniqueID :one
SELECT id, owner_id, user_agent, refresh_token, client_ip, is_blocked, expired_at, created_at FROM sessions
where ($1::uuid IS NULL OR $1::uuid = sessions.id)
AND ($2::bigint IS NULL OR $2::bigint  = sessions.owner_id)
LIMIT 1
`

type GetSessionByUniqueIDParams struct {
	ID      pgtype.UUID `json:"id"`
	OwnerID pgtype.Int8 `json:"owner_id"`
}

func (q *Queries) GetSessionByUniqueID(ctx context.Context, arg GetSessionByUniqueIDParams) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByUniqueID, arg.ID, arg.OwnerID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserAgent,
		&i.RefreshToken,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionList = `-- name: GetSessionList :many
SELECT id, owner_id, user_agent, refresh_token, client_ip, is_blocked, expired_at, created_at FROM sessions
where ($1::uuid IS NULL OR $1::uuid = sessions.id)
AND ($2::bigint IS NULL OR $2::bigint  = sessions.owner_id)
`

type GetSessionListParams struct {
	ID      pgtype.UUID `json:"id"`
	OwnerID pgtype.Int8 `json:"owner_id"`
}

func (q *Queries) GetSessionList(ctx context.Context, arg GetSessionListParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, getSessionList, arg.ID, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Session{}
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.UserAgent,
			&i.RefreshToken,
			&i.ClientIp,
			&i.IsBlocked,
			&i.ExpiredAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
